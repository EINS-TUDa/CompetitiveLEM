********************************************************************************
* @author: julia.barbosa@eins.tu-darmstadt.de
********************************************************************************

* -------------------------------------------------------
* -- External Inputs --
* ---------------------------------------------------------
Sets
a  Agents
c  Commodities
t  Timesteps
p(a,c,c)  Processes



* -- Param Sets --
ParamSetSocial 
/
D0 
elasticity 
/


ParamSetAgentCommodity Agent Parameters
/
maxGen
strCap
strEff
bindedGenFactor
wasteCost
costGen
hasStorage
strPower
isCoupled
availbilityGiven
/

ParamSetAgentCommodityTime Agent Parameters (time dependent)
/
minLoad
maxLoad
availability
/

ParamSetProcess
/
pEff
pmaxPower
/
;


$GDXIN qp_input.gdx
$LOAD a c t p
$GDXIN


alias(c,ci,co);

* --  Parameters --
Parameters
ParamSocial(c,t, ParamSetSocial) Social Parameters (Commodity time  dependent)

ParamAC(a,c, ParamSetAgentCommodity)  Agent Parameters (Agent commodity dependent)

ParamACT(a,c,t, ParamSetAgentCommodityTime)  Agent Parameters (Agent commodity dependent time dependent)

ParamAP(a,ci,co, ParamSetProcess)

validAC(a,c)    # Flag True if  commodity is valid for that agent
validWaste(a,c) # Flag True if agent can waste commodity c
;


$GDXIN qp_input.gdx
$LOAD ParamSocial ParamAC ParamAP ParamACT validAC validWaste
$GDXIN


* -- Derived and Parameters --
parameter
dt
validP(a,ci,co)
canWaste(a,c)
;


dt = 1;

loop(p(a,ci,co),
    validP(a,ci,co) = 1;
);



* -- Variables ---
Variables
wf Social Welfare
cwf(c) Consumer welfare

D(c,t) Demand of commodity c at time t

* Primary Variables
Pm(a,c,t) Commodity c purchased by agent a at time t
;

Positive Variables

TotalCost(a) Total cost of agent a

Pg(a,c,t) Commodity c generated by the agent a at time t
Pd(a,c,t) Commodity c demanded by agent a at time t

Pw(a,c,t) Waste energy from coupled generation processes

Pt_in(a,ci,co,t) Power consumed by transformation process p at time t by agent a
Pt_out(a,ci,co,t) Power supplied by transformation process p at time t by agent a

Ps_d(a, c, t) Commodity c supplied by the agent a storage at time t
Ps_c(a, c, t) Commodity c consued by the agent to charge storage at time t
Es(a, c, t) Commodity c stored by the agent a at time t

;


* -------------------------------------------------------
Equations
* Cost
SocialWelfare_Eq
ConsumerWelfare_Eq(c)
AgentTotalCost_Eq(a) 


* -- Power Balance Eqs
PowerBalance_Eq(c,t)
AgentPowerBalance_Eq(a,c,t)

* -- Up Limits Eqs
PgUpper_Eq(a,c,t)
PdUpper_Eq(a,c,t)


* Availbility_Eq(a,c,t)

* -- Coupled Generation Equations
CoupledCondition_Eq(a,t)

* Storage Equation
PsCUpper_Eq(a,c,t)
PsDUpper_Eq(a,c,t)
EsUpper_Eq(a,c,t)
StrEnergyBalance_Eq(a,c,t)

* Converion Processes
PtConversion_Eq(a,ci,co,t)
PtUpper_Eq(a,ci,co,t)

;

* Global

SocialWelfare_Eq ..
    wf =e= sum(c, cwf(c)) - sum(a, TotalCost(a))
;

ConsumerWelfare_Eq(c) ..
cwf(c) =e= sum(t, 
                    ParamSocial(c,t,"elasticity")*(ParamSocial(c,t,"D0")*D(c,t) - 0.5*D(c,t)*D(c,t))
         );

AgentTotalCost_Eq(a) ..
TotalCost(a) =e= sum(t, sum(c$validAC(a,c), Pg(a,c,t)*ParamAC(a,c,"costGen"))
                +  sum(c$validWaste(a,c), Pw(a,c,t)*ParamAC(a,c,"wasteCost"))
                );



* -- Power Balance Equations --
PowerBalance_Eq(c,t)..
 sum(a$validAC(a,c), Pm(a,c,t)) =e= D(c,t)
 ;

AgentPowerBalance_Eq(a,c,t)$validAC(a,c) .. 
Pm(a,c,t) =e= Pg(a,c,t) - Pd(a,c,t)
           + (Ps_d(a,c,t)- Ps_c(a,c,t))$ParamAC(a,c,"hasStorage")
           + (sum(p(a,ci,c)$validP(a,ci,c),Pt_out(a,ci,c,t)) - sum(p(a,c,co)$validP(a,c,co),Pt_in(a,c,co,t)))
            
;


* -- Power limits --
PgUpper_Eq(a,c,t)$validAC(a,c)..
Pg(a,c,t) =l= ParamAC(a,c,"maxGen")$(not ParamAC(a,c, "availbilityGiven")) +
               ParamAC(a,c,"maxGen")*ParamACT(a,c,t,"availability")$ParamAC(a,c,"availbilityGiven") ;

PdUpper_Eq(a,c,t)$validAC(a,c)..
-Pd(a,c,t) =g= -ParamACT(a,c,t,"maxLoad");


* -- Coupled Generation --
CoupledCondition_Eq(a,t)..
sum(c$(not validWaste(a,c)), Pg(a,c,t)*ParamAC(a,c,"bindedGenFactor"))
+ sum(c$validWaste(a,c), (Pw(a,c,t) + Pg(a,c,t))*ParamAC(a,c,"bindedGenFactor")) =e= 0;


* -- Storage Equations --
PsCUpper_Eq(a,c,t)$(ParamAC(a,c,"hasStorage")) ..
Ps_c(a,c,t) =l= ParamAC(a,c,"strPower");
 
PsDUpper_Eq(a,c,t)$(ParamAC(a,c,"hasStorage"))..
Ps_d(a,c,t) =l= ParamAC(a,c,"strPower");

EsUpper_Eq(a,c,t)$(ParamAC(a,c,"hasStorage"))..
Es(a,c,t) =l= ParamAC(a,c,"strCap");

StrEnergyBalance_Eq(a,c,t)$(ParamAC(a,c,"hasStorage"))..
Es(a,c,t) =e= Es(a,c,t--1)
+ Ps_c(a,c,t)*ParamAC(a,c,"strEff") - Ps_d(a,c,t)
;

* -- Conversion Process eqs --
PtConversion_Eq(p(a,ci,co),t) $ validP(a,ci,co) ..
Pt_out(a, ci, co, t) =e= Pt_in(a,ci,co,t) * ParamAP(a,ci,co,"pEff");


PtUpper_Eq(p(a,ci,co),t)$ validP(a,ci,co)..
Pt_out(a, ci, co, t) =l= ParamAP(a,ci,co,"pmaxPower");



option QCP = cplex;
Model QP /all/;
solve QP using qcp maximizing wf ;


parameter
energyPrice(c,t)
ProdSur(a)
ConSur(c)
;


energyPrice(c,t) = ParamSocial(c,t,"Elasticity")*(ParamSocial(c,t,"D0") - D.l(c,t));

ProdSur(a) = sum(c $ validAC(a,c),sum(t, Pm.l(a,c,t)*energyPrice(c,t)
            - Pg.l(a,c,t)*ParamAC(a,c,"costGen")
            -Pw.l(a,c,t)*ParamAC(a,c,"wasteCost")$validWaste(a,c)
            ));

*ConSur(c) = sum(t, ParamSocial(c,t,"elasticity")*(0.5*D.l(c,t)*D.l(c,t)));
ConSur(c) = sum(t, ParamSocial(c,t,"elasticity")*(ParamSocial(c,t,"D0")*D.l(c,t) - 0.5*D.l(c,t)*D.l(c,t)) -energyPrice(c,t)*D.l(c,t));

